/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.ioixd.spigotjsongen;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;

import com.google.gson.Gson;

public class App {
    public static void main(String[] args) throws IOException {
        String[][] packages = new String[][] {
            {"org.bukkit",
                    "org.bukkit.StructureType",
                    "org.bukkit.World$Environment",
                    "org.bukkit.BanList$Type",
                    "org.bukkit.plugin.ServicePriority",
                    "org.bukkit.entity.EnderDragon$Phase",
                    "org.bukkit.conversations.ConversationAbandonedEvent",
                    "org.bukkit.command.Command",
                    "org.bukkit.ChatColor",
                    "org.bukkit.enchantments.EnchantmentTarget",
                    "org.bukkit.entity.Spellcaster$Spell",
                    "org.bukkit.block.Lectern",
                    "org.bukkit.Warning$WarningState",
                    "org.bukkit.material.Directional",
            },
            {"net.md_5",
                    "net.md_5.bungee.chat.TranslationRegistry$TranslationProvider"}
        };
        HashMap<String, Object> parsed_packages = new HashMap<>();

        for(String[] pkg : packages) {
            String[] oh = new String[] {};
            if(pkg.length >= 1) {
                oh = Arrays.copyOfRange(pkg, 1, pkg.length);
            }
            parsed_packages.put(pkg[0], packageMap(pkg[0], oh));
        }

        File dest_file = new File("../../spigot.json");
        dest_file.createNewFile();

        FileWriter dest = new FileWriter("../../spigot.json");
        String json = new Gson().toJson(parsed_packages);
        dest.write(json, 0, json.length());
        dest.close();
    }

    public static HashMap<String,HashMap<String,Object>> packageMap(String packageName, String[] lostImports) {
        Reflections reflections = new Reflections(packageName, new SubTypesScanner(false));
        HashMap<String, HashMap<String,Object>> all = new HashMap<>();

        // =======
        // CLASSES
        // =======
        ArrayList<ParsedClass> classes = new ArrayList<ParsedClass>();
        for(Class<? extends Object> cls : reflections.getSubTypesOf(Object.class)) {
            classes.add(new ParsedClass(cls));
        }

        for (String importStr : lostImports) {
            Class<?> what;
            try {
                what = Class.forName(importStr);
                classes.add(new ParsedClass(what));
            } catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                System.exit(1);
            }
        }

        HashMap<String, ParsedClass> classes_part_2 = new HashMap<>();

        classes.forEach(c -> {
            classes_part_2.put(c.name, c);
        });

        classes_part_2.keySet().forEach(c -> {
            ParsedClass cls = classes_part_2.get(c);
            if(all.get(cls.packageName) == null) {
                all.put(cls.packageName, new HashMap<>());
            }
            all.get(cls.packageName).put(c, cls);
        });

        // =======
        // ENUMS
        // =======
        ArrayList<Enum<?>> enum_objects = new ArrayList<>();
        for(Class<?> e : reflections.getSubTypesOf(Enum.class)) {
            try {
                if(e.getName().contains("$")) {
                    continue;
                }
                Method valueOf = e.getDeclaredMethod("valueOf", String.class);
                String value = e.getEnumConstants()[0].toString();
                if(value.toUpperCase() != value) {
                    value = value.replaceAll("([A-Z])", "_$1").toUpperCase();
                }
                enum_objects.add((Enum<?>) valueOf.invoke(null, value));
            } catch(InvocationTargetException ignored) {
            } catch (IllegalAccessException | IllegalArgumentException
                    | NoSuchMethodException | SecurityException e1) {
                String value = e.getEnumConstants()[0].toString();
                System.out.println(value);
                e1.printStackTrace();
            }
        };


        ArrayList<ParsedEnum> enums = new ArrayList<ParsedEnum>();
        for(Enum<?> e : enum_objects) {
            enums.add(new ParsedEnum(e));
        }

        HashMap<String, ParsedEnum> enums_part_2 = new HashMap<>();

        enums.forEach(c -> {
            enums_part_2.put(c.name, c);
        });

        enums_part_2.keySet().forEach(c -> {
            ParsedEnum e = enums_part_2.get(c);
            if(all.get(e.packageName) == null) {
                all.put(e.packageName, new HashMap<>());
            }
            all.get(e.packageName).put(c, e);
        });

        return all;
    }
}
